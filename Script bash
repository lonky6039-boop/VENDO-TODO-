#!/usr/bin/env bash
set -e

ROOT="VENDO-TODO"
ZIPNAME="VENDO-TODO.zip"

echo "Creando estructura en ./$ROOT ..."
rm -rf "$ROOT"
mkdir -p "$ROOT"/{frontend,backend,admin-panel,assets,documentation,.github/workflows}

# README.md
cat > "$ROOT/README.md" <<'EOF'
# VENDO TODO

Paquete completo "VENDO TODO" (Ventas El Bolsón)
Stack: React + Vite (PWA), Firebase (Auth, Firestore, Storage), Backend: Node.js + Express, Mercado Pago (checkout).
Incluye: frontend (PWA), admin-panel, backend con endpoint Mercado Pago y generación de tickets PDF (cliente y servidor), productos de ejemplo y GH Actions.

Lee documentation/readme.md para pasos detallados.
EOF

# .env.example (root)
cat > "$ROOT/.env.example" <<'EOF'
# BACKEND (copiar a backend/.env)
PORT=4000
MERCADOPAGO_ACCESS_TOKEN=TEST-xxxxxxxxxxxxxxxxxxxxxxxxxxxx
FRONTEND_URL=http://localhost:5173

# Datos del negocio para tickets (reemplazar por tus datos)
BUSINESS_NAME=VENTAS EL BOLSÓN
BUSINESS_CUIT=00-00000000-0
BUSINESS_ADDRESS=Calle Falsa 123, Localidad
BUSINESS_PHONE=549XXXXXXXXX
BUSINESS_EMAIL=ventas@tudominio.com
BUSINESS_LOGO_PATH=/logo-512.png  # ruta pública en frontend/public

# FRONTEND (copiar a frontend/.env)
VITE_FIREBASE_API_KEY=your_firebase_api_key
VITE_FIREBASE_AUTH_DOMAIN=your_project.firebaseapp.com
VITE_FIREBASE_PROJECT_ID=your_project_id
VITE_FIREBASE_STORAGE_BUCKET=your_project.appspot.com
VITE_FIREBASE_MESSAGING_SENDER_ID=your_sender_id
VITE_FIREBASE_APP_ID=your_app_id

VITE_MERCADOPAGO_PUBLIC_KEY=TEST-xxxxxxxxxxxxxxxxxxxxxxx
VITE_BACKEND_URL=http://localhost:4000

# ADMIN_PANEL (opcional lista de emails administradores)
ADMIN_EMAILS=admin@tudominio.com,otroadmin@dominio.com
EOF

#######################
# BACKEND
#######################
mkdir -p "$ROOT/backend"
cat > "$ROOT/backend/package.json" <<'EOF'
{
  "name": "vendo-todo-backend",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "cors": "^2.8.5",
    "dotenv": "^16.0.0",
    "express": "^4.18.2",
    "mercadopago": "^2.6.5",
    "body-parser": "^1.20.2",
    "pdfkit": "^0.13.0",
    "axios": "^1.4.0"
  },
  "devDependencies": {
    "nodemon": "^2.0.22"
  }
}
EOF

cat > "$ROOT/backend/server.js" <<'EOF'
require('dotenv').config();
const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const mercadopago = require('mercadopago');
const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 4000;

app.use(cors({
  origin: process.env.FRONTEND_URL || 'http://localhost:5173'
}));
app.use(bodyParser.json());

if (process.env.MERCADOPAGO_ACCESS_TOKEN) {
  mercadopago.configure({ access_token: process.env.MERCADOPAGO_ACCESS_TOKEN });
} else {
  console.warn('MERCADOPAGO_ACCESS_TOKEN no definido en .env');
}

// Endpoint para crear preferencia Mercado Pago
app.post('/api/mercadopago/create_preference', async (req, res) => {
  try {
    const { items, payer } = req.body;
    const preference = {
      items: items.map(i => ({
        title: i.title,
        quantity: i.quantity,
        unit_price: Number(i.price),
        currency_id: 'ARS'
      })),
      payer: payer || {},
      back_urls: {
        success: process.env.FRONTEND_URL + '/checkout/success',
        failure: process.env.FRONTEND_URL + '/checkout/failure',
        pending: process.env.FRONTEND_URL + '/checkout/pending'
      },
      auto_return: 'approved'
    };
    const response = await mercadopago.preferences.create(preference);
    return res.json({ preferenceId: response.body.id, init_point: response.body.init_point });
  } catch (err) {
    console.error('Error crear preferencia', err);
    return res.status(500).json({ error: 'No se pudo crear preferencia' });
  }
});

// Webhook Mercado Pago (recibe notificaciones)
app.post('/api/mercadopago/webhook', (req, res) => {
  console.log('Webhook recibido:', req.body);
  // Aquí puedes validar y actualizar una venta en tu base de datos
  res.status(200).send('OK');
});

// Generar ticket PDF en backend: POST /api/ticket
// Body: { sale: { id, date, items: [{title,quantity,price}], total, customer: {name,email,phone} } }
app.post('/api/ticket', (req, res) => {
  const { sale } = req.body;
  if (!sale) return res.status(400).json({ error: 'sale es requerido' });

  // Datos del negocio desde .env (placeholders si no están)
  const bizName = process.env.BUSINESS_NAME || 'VENDO TODO';
  const bizCuit = process.env.BUSINESS_CUIT || '';
  const bizAddress = process.env.BUSINESS_ADDRESS || '';
  const bizPhone = process.env.BUSINESS_PHONE || '';
  const bizEmail = process.env.BUSINESS_EMAIL || '';
  const bizLogoPath = process.env.BUSINESS_LOGO_PATH || '/logo-512.png'; // ruta pública

  const doc = new PDFDocument({ size: 'A4', margin: 40 });
  let buffers = [];
  doc.on('data', buffers.push.bind(buffers));
  doc.on('end', () => {
    const pdfData = Buffer.concat(buffers);
    res.set({
      'Content-Type': 'application/pdf',
      'Content-Disposition': `attachment; filename=ticket-${sale.id || Date.now()}.pdf`,
      'Content-Length': pdfData.length
    });
    res.send(pdfData);
  });

  // Cabezal con logo (si existe en backend/assets/logo.png) o ruta pública (no se incrusta desde frontend)
  const localLogo = path.join(__dirname, '..', 'assets', 'logo.png');
  if (fs.existsSync(localLogo)) {
    doc.image(localLogo, { fit: [120, 120], align: 'left' });
  }
  doc.fontSize(18).text(bizName, { align: 'right' });
  doc.moveDown(0.2);
  if (bizCuit) doc.fontSize(10).text('CUIT: ' + bizCuit, { align: 'right' });
  if (bizAddress) doc.text(bizAddress, { align: 'right' });
  if (bizPhone) doc.text('Tel: ' + bizPhone + (bizEmail ? ' | ' + bizEmail : ''), { align: 'right' });
  doc.moveDown();

  doc.fontSize(12).text('Ticket de venta', { align: 'center' });
  doc.moveDown();
  doc.fontSize(10).text('Fecha: ' + (new Date(sale.date || Date.now())).toLocaleString());
  if (sale.customer && sale.customer.name) doc.text('Cliente: ' + sale.customer.name);
  doc.moveDown();

  doc.text('Items:');
  doc.moveDown(0.5);
  sale.items.forEach(i => {
    doc.text(`- ${i.title} x${i.quantity}  $${i.price}`);
  });
  doc.moveDown();
  doc.text('Total: $' + sale.total, { bold: true });
  doc.moveDown(2);
  doc.text('Gracias por su compra!', { align: 'center' });
  doc.end();
});

app.listen(PORT, () => {
  console.log(`Backend escuchando en http://localhost:${PORT}`);
});
EOF

#######################
# FRONTEND (VITE + REACT)
#######################
mkdir -p "$ROOT/frontend/public"
mkdir -p "$ROOT/frontend/src/components"
mkdir -p "$ROOT/frontend/src/pages"
mkdir -p "$ROOT/frontend/src/hooks"

cat > "$ROOT/frontend/package.json" <<'EOF'
{
  "name": "vendo-todo-frontend",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "firebase": "^9.22.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.14.1",
    "axios": "^1.4.0",
    "jspdf": "^2.5.1"
  },
  "devDependencies": {
    "vite": "^5.2.0"
  }
}
EOF

cat > "$ROOT/frontend/index.html" <<'EOF'
<!doctype html>
<html lang="es">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>VENDO TODO</title>
    <link rel="manifest" href="/manifest.json" />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
EOF

cat > "$ROOT/frontend/public/manifest.json" <<'EOF'
{
  "short_name": "VENDOTODO",
  "name": "VENDO TODO - Tienda",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#ffffff",
  "description": "App de ventas - VENDO TODO",
  "icons": [
    { "src": "/logo-192.png", "sizes": "192x192", "type": "image/png" },
    { "src": "/logo-512.png", "sizes": "512x512", "type": "image/png" }
  ],
  "theme_color": "#2B8A3E"
}
EOF

cat > "$ROOT/frontend/src/main.jsx" <<'EOF'
import React from 'react';
import { createRoot } from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App';
import './styles.css';

createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>
);
EOF

cat > "$ROOT/frontend/src/firebase.js" <<'EOF'
import { initializeApp } from 'firebase/app';
import { getAuth } from 'firebase/auth';
import { getFirestore } from 'firebase/firestore';
import { getStorage } from 'firebase/storage';

const firebaseConfig = {
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
  appId: import.meta.env.VITE_FIREBASE_APP_ID
};

const app = initializeApp(firebaseConfig);
export const auth = getAuth(app);
export const db = getFirestore(app);
export const storage = getStorage(app);
export default app;
EOF

cat > "$ROOT/frontend/src/App.jsx" <<'EOF'
import React from 'react';
import { Routes, Route, Link } from 'react-router-dom';
import ProductList from './components/ProductList';
import Cart from './components/Cart';
import Checkout from './pages/Checkout';

export default function App() {
  return (
    <div>
      <header style={{ padding: 16, background: '#2B8A3E', color: 'white' }}>
        <h1>VENDO TODO</h1>
        <nav>
          <Link to="/" style={{ color: 'white', marginRight: 10 }}>Tienda</Link>
          <Link to="/cart" style={{ color: 'white' }}>Carrito</Link>
          <Link to="/admin" style={{ color: 'white', marginLeft: 10 }}>Admin</Link>
        </nav>
      </header>

      <main style={{ padding: 16 }}>
        <Routes>
          <Route path="/" element={<ProductList />} />
          <Route path="/cart" element={<Cart />} />
          <Route path="/checkout" element={<Checkout />} />
          <Route path="/checkout/success" element={<div>Pago aprobado. Gracias!</div>} />
          <Route path="/checkout/failure" element={<div>Pago fallido.</div>} />
          <Route path="/checkout/pending" element={<div>Pago pendiente.</div>} />
        </Routes>
      </main>
    </div>
  );
}
EOF

cat > "$ROOT/frontend/src/components/ProductList.jsx" <<'EOF'
import React, { useEffect, useState } from 'react';
import { collection, getDocs } from 'firebase/firestore';
import { db } from '../firebase';
import useCart from '../hooks/useCart';

export default function ProductList() {
  const [products, setProducts] = useState([]);
  const { addItem } = useCart();

  useEffect(() => {
    async function load() {
      const snap = await getDocs(collection(db, 'products'));
      const list = snap.docs.map(d => ({ id: d.id, ...d.data() }));
      setProducts(list);
    }
    load();
  }, []);

  return (
    <div>
      <h2>Productos</h2>
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit,minmax(240px,1fr))', gap: 12 }}>
        {products.map(p => (
          <div key={p.id} style={{ border: '1px solid #ddd', padding: 12 }}>
            <img src={p.image || '/logo-192.png'} alt={p.title} style={{ width: '100%', height: 160, objectFit: 'cover' }} />
            <h3>{p.title}</h3>
            <p>{p.description}</p>
            <p><b>${p.price}</b></p>
            <button onClick={() => addItem({ id: p.id, title: p.title, price: p.price, quantity: 1 })}>Agregar al carrito</button>
            <a style={{ marginLeft: 8 }} href={`https://wa.me/${process.env.VITE_WHATSAPP_NUMBER || '549XXXXXXXXX'}?text=Hola%20quiero%20comprar%20${encodeURIComponent(p.title)}`} target="_blank" rel="noreferrer">WhatsApp</a>
          </div>
        ))}
      </div>
    </div>
  );
}
EOF

cat > "$ROOT/frontend/src/hooks/useCart.js" <<'EOF'
import { useState, useEffect } from 'react';
import { collection, addDoc } from 'firebase/firestore';
import { db } from '../firebase';

const CART_KEY = 'vt_cart';

export default function useCart() {
  const [items, setItems] = useState([]);

  useEffect(() => {
    const raw = localStorage.getItem(CART_KEY);
    if (raw) setItems(JSON.parse(raw));
  }, []);

  useEffect(() => {
    localStorage.setItem(CART_KEY, JSON.stringify(items));
  }, [items]);

  const addItem = item => {
    setItems(prev => {
      const idx = prev.findIndex(p => p.id === item.id);
      if (idx >= 0) {
        const cp = [...prev];
        cp[idx].quantity += item.quantity || 1;
        return cp;
      }
      return [...prev, item];
    });
  };

  const removeItem = id => setItems(prev => prev.filter(p => p.id !== id));
  const clear = () => setItems([]);
  const total = items.reduce((s, i) => s + (i.quantity * Number(i.price)), 0);

  // helper to save sale record in Firestore (optional)
  const saveSale = async (sale) => {
    try {
      await addDoc(collection(db, 'sales'), sale);
    } catch (err) {
      console.error('Error guardando venta en Firestore', err);
    }
  };

  return { items, addItem, removeItem, clear, total, saveSale };
}
EOF

cat > "$ROOT/frontend/src/components/Cart.jsx" <<'EOF'
import React from 'react';
import { useNavigate } from 'react-router-dom';
import useCart from '../hooks/useCart';

export default function Cart() {
  const { items, removeItem, clear, total } = useCart();
  const navigate = useNavigate();

  return (
    <div>
      <h2>Carrito</h2>
      {items.length === 0 && <p>El carrito está vacío.</p>}
      {items.map(i => (
        <div key={i.id} style={{ borderBottom: '1px solid #eee', padding: 8 }}>
          <b>{i.title}</b> x {i.quantity} — ${i.price}
          <button style={{ marginLeft: 8 }} onClick={() => removeItem(i.id)}>Eliminar</button>
        </div>
      ))}
      <h3>Total: ${total}</h3>
      <button onClick={() => navigate('/checkout')}>Finalizar compra</button>
      <button onClick={clear} style={{ marginLeft: 8 }}>Vaciar</button>
    </div>
  );
}
EOF

cat > "$ROOT/frontend/src/pages/Checkout.jsx" <<'EOF'
import React from 'react';
import useCart from '../hooks/useCart';
import axios from 'axios';
import { jsPDF } from 'jspdf';

export default function Checkout() {
  const { items, clear, total, saveSale } = useCart();

  const handlePay = async () => {
    if (items.length === 0) return alert('El carrito está vacío');

    try {
      const backendUrl = import.meta.env.VITE_BACKEND_URL || 'http://localhost:4000';
      const payload = {
        items: items.map(i => ({ title: i.title, quantity: i.quantity, price: i.price })),
        payer: { email: '' }
      };

      const res = await axios.post(`${backendUrl}/api/mercadopago/create_preference`, payload);
      if (res.data.init_point) {
        // Antes de redirigir: guardar venta provisional en Firestore (estado: pending)
        const sale = {
          items: payload.items,
          total,
          date: new Date().toISOString(),
          status: 'pending'
        };
        await saveSale(sale);
        window.location.href = res.data.init_point;
      } else {
        alert('No se pudo generar la preferencia de pago.');
      }
    } catch (err) {
      console.error(err);
      alert('Error al iniciar pago.');
    }
  };

  const generatePDF = async () => {
    // PDF cliente con logo público (frontend/public/logo-512.png)
    const doc = new jsPDF();
    const bizName = import.meta.env.VITE_BUSINESS_NAME || 'VENDO TODO';
    const bizCuit = import.meta.env.VITE_BUSINESS_CUIT || '';
    const bizAddress = import.meta.env.VITE_BUSINESS_ADDRESS || '';
    const bizPhone = import.meta.env.VITE_BUSINESS_PHONE || '';
    const logoPath = import.meta.env.VITE_BUSINESS_LOGO || '/logo-512.png';

    // Opcional: cargar imagen y añadir al PDF (si CORS lo permite)
    try {
      const imgData = await fetch(logoPath).then(r => r.blob()).then(blob => {
        return new Promise((resolve) => {
          const reader = new FileReader();
          reader.onload = () => resolve(reader.result);
          reader.readAsDataURL(blob);
        });
      });
      doc.addImage(imgData, 'PNG', 14, 10, 40, 40);
    } catch (err) {
      // no crítico
      console.warn('No se pudo cargar logo para PDF cliente', err);
    }

    doc.setFontSize(16);
    doc.text(bizName, 140, 20, null, null, 'right');
    if (bizCuit) doc.setFontSize(10).text('CUIT: ' + bizCuit, 140, 28, null, null, 'right');
    if (bizAddress) doc.text(bizAddress, 140, 36, null, null, 'right');
    if (bizPhone) doc.text('Tel: ' + bizPhone, 140, 44, null, null, 'right');

    doc.setFontSize(12);
    doc.text('Ticket de venta', 14, 60);
    doc.text('Fecha: ' + new Date().toLocaleString(), 14, 68);
    let y = 80;
    items.forEach(i => {
      doc.text(`- ${i.title} x${i.quantity}  $${i.price}`, 14, y);
      y += 8;
    });
    doc.text(`Total: $${total}`, 14, y + 8);
    doc.save(`ticket-${Date.now()}.pdf`);
  };

  return (
    <div>
      <h2>Checkout</h2>
      <p>Total a pagar: ${total}</p>
      <button onClick={handlePay}>Pagar con Mercado Pago</button>
      <button onClick={generatePDF} style={{ marginLeft: 8 }}>Generar recibo (PDF)</button>
      <p>O contacta vía WhatsApp si prefieres pago en efectivo.</p>
    </div>
  );
}
EOF

cat > "$ROOT/frontend/src/styles.css" <<'EOF'
body { font-family: Arial, sans-serif; margin: 0; background: #fafafa; color: #222; }
a { color: #2B8A3E; }
button { background: #2B8A3E; color: #fff; border: none; padding: 8px 12px; cursor: pointer; }
button:hover { opacity: 0.9; }
EOF

# frontend env placeholders for business (optional)
cat > "$ROOT/frontend/.env.example" <<'EOF'
VITE_BUSINESS_NAME=VENTAS EL BOLSÓN
VITE_BUSINESS_CUIT=00-00000000-0
VITE_BUSINESS_ADDRESS=Calle Falsa 123
VITE_BUSINESS_PHONE=549XXXXXXXXX
VITE_BUSINESS_LOGO=/logo-512.png
EOF

#######################
# ADMIN PANEL (simple)
#######################
mkdir -p "$ROOT/admin-panel/src"
cat > "$ROOT/admin-panel/package.json" <<'EOF'
{
  "name": "vendo-todo-admin",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build"
  },
  "dependencies": {
    "firebase": "^9.22.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.14.1"
  },
  "devDependencies": {
    "vite": "^5.2.0"
  }
}
EOF

cat > "$ROOT/admin-panel/index.html" <<'EOF'
<!doctype html>
<html lang="es"><head><meta charset="utf-8"/><meta name="viewport" content="width=device-width,initial-scale=1"/><title>Admin VENDO TODO</title></head>
<body><div id="root"></div><script type="module" src="/src/main.jsx"></script></body>
</html>
EOF

cat > "$ROOT/admin-panel/src/main.jsx" <<'EOF'
import React from 'react';
import { createRoot } from 'react-dom/client';
import AdminApp from './AdminApp';
import './styles.css';

createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <AdminApp />
  </React.StrictMode>
);
EOF

cat > "$ROOT/admin-panel/src/firebaseConfig.jsx" <<'EOF'
import { initializeApp } from 'firebase/app';
const firebaseConfig = {
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
  appId: import.meta.env.VITE_FIREBASE_APP_ID
};
const app = initializeApp(firebaseConfig);
export default app;
EOF

cat > "$ROOT/admin-panel/src/AdminApp.jsx" <<'EOF'
import React from 'react';
import UploadForm from './UploadForm';

export default function AdminApp() {
  return (
    <div style={{ padding: 20 }}>
      <h1>Admin - VENDO TODO</h1>
      <UploadForm />
      <p>Protege este panel en producción (reglas Firestore o verificación de emails).</p>
    </div>
  );
}
EOF

cat > "$ROOT/admin-panel/src/UploadForm.jsx" <<'EOF'
import React, { useState } from 'react';
import { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import { getFirestore, collection, addDoc } from 'firebase/firestore';
import app from './firebaseConfig';

export default function UploadForm() {
  const [title, setTitle] = useState('');
  const [price, setPrice] = useState('');
  const [desc, setDesc] = useState('');
  const [file, setFile] = useState(null);

  const onSubmit = async (e) => {
    e.preventDefault();
    const storage = getStorage(app);
    const db = getFirestore(app);
    let imageUrl = '';
    if (file) {
      const storageRef = ref(storage, `products/${Date.now()}-${file.name}`);
      await uploadBytes(storageRef, file);
      imageUrl = await getDownloadURL(storageRef);
    }
    await addDoc(collection(db, 'products'), {
      title, price: Number(price), description: desc, image: imageUrl, stock: 100, category: 'General'
    });
    alert('Producto subido');
    setTitle(''); setPrice(''); setDesc(''); setFile(null);
  };

  return (
    <form onSubmit={onSubmit}>
      <div><input placeholder="Título" value={title} onChange={e=>setTitle(e.target.value)} required/></div>
      <div><input placeholder="Precio" value={price} onChange={e=>setPrice(e.target.value)} required/></div>
      <div><textarea placeholder="Descripción" value={desc} onChange={e=>setDesc(e.target.value)} /></div>
      <div><input type="file" onChange={e=>setFile(e.target.files[0])} /></div>
      <button type="submit">Subir producto</button>
    </form>
  );
}
EOF

cat > "$ROOT/admin-panel/src/styles.css" <<'EOF'
body { font-family: Arial, sans-serif; padding: 10px; }
input, textarea { display: block; margin: 8px 0; padding: 8px; width: 100%; max-width: 400px; }
button { background: #2B8A3E; color: #fff; border: none; padding: 8px 12px; cursor: pointer; }
EOF

#######################
# ASSETS & SAMPLE PRODUCTS
#######################
mkdir -p "$ROOT/frontend/public"
# placeholder images (tiny png data)
cat > "$ROOT/frontend/public/logo-192.png" <<'PNG'
iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACt...
PNG
# Note: The above is placeholder token. User should replace actual image files.
cat > "$ROOT/frontend/public/logo-512.png" <<'PNG'
iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACA...
PNG

cat > "$ROOT/assets/README.txt" <<'EOF'
Reemplaza los siguientes archivos por tu logo:
- frontend/public/logo-192.png
- frontend/public/logo-512.png
- backend/assets/logo.png  (opcional, usado por backend si existe)

Datos del negocio para tickets: editar backend/.env y frontend/.env según .env.example
EOF

cat > "$ROOT/products_sample.json" <<'EOF'
[
  {"title":"Alfajor artesanal","description":"Alfajor dulce casero","price":150,"image":"","stock":20,"category":"Alimentos"},
  {"title":"Mermelada frutal","description":"Mermelada artesanal 250g","price":320,"image":"","stock":15,"category":"Alimentos"},
  {"title":"Dulce de leche","description":"Dulce de leche tradicional 400g","price":480,"image":"","stock":10,"category":"Alimentos"},
  {"title":"Jabón natural","description":"Jabón artesanal de lavanda","price":250,"image":"","stock":30,"category":"Hogar"},
  {"title":"Bandeja de madera","description":"Bandeja rústica hecha a mano","price":950,"image":"","stock":5,"category":"Decoración"},
  {"title":"Mueble chico","description":"Mesa auxiliar pequeña","price":5500,"image":"","stock":2,"category":"Muebles"}
]
EOF

#######################
# DOCUMENTATION
#######################
mkdir -p "$ROOT/documentation"
cat > "$ROOT/documentation/readme.md" <<'EOF'
Documentación rápida para VENDO-TODO

1) Generar proyecto Firebase:
 - En console.firebase.google.com crea un proyecto.
 - Habilita Authentication (Email, Google; Facebook requiere APP id/secret).
 - Crea Firestore (modo pruebas durante desarrollo).
 - Crea Storage para imágenes.
 - Copia las credenciales y pégalas en frontend/.env y admin-panel variables (usar .env.example).

2) Mercado Pago:
 - Crea cuenta en Mercado Pago y en Developers obtén credenciales de TEST (sandbox).
 - Pegar MERCADOPAGO_ACCESS_TOKEN en backend/.env.
 - Pegar VITE_MERCADOPAGO_PUBLIC_KEY en frontend/.env (no es obligatoria para este flujo).

3) Instalar dependencias y ejecutar:
 - Backend:
   cd backend
   cp ../.env.example .env
   # editar backend/.env con MERCADOPAGO_ACCESS_TOKEN y datos del negocio
   npm install
   npm run dev
 - Frontend:
   cd frontend
   cp ../.env.example .env
   # editar frontend/.env con VITE_... y datos del negocio
   npm install
   npm run dev
 - Admin-panel:
   cd admin-panel
   cp ../.env.example .env
   npm install
   npm run dev

4) Subir productos:
 - Importar products_sample.json desde Firebase Console (Firestore): crear collection 'products' y añadir documentos.
 - O usar admin-panel para subir productos y subir imágenes a Storage.

5) Pruebas de pago:
 - Con backend corriendo y MERCADOPAGO_ACCESS_TOKEN de sandbox, desde frontend crear preferencia y serás redirigido a MP sandbox.
 - En success/failure/pending, MP redirige a las rutas definidas y se puede implementar guardado de status mediante webhook.

6) Tickets:
 - Cliente: botón "Generar recibo (PDF)" en Checkout genera PDF con logo público y datos del negocio.
 - Backend: POST /api/ticket genera PDF desde servidor; envía el objeto sale en el body.

7) Subir a GitHub:
 - Crear repo llamado VENDO-TODO
 - git init; git add .; git commit -m "Initial VENDO TODO"
 - git remote add origin https://github.com/TU_USUARIO/VENDO-TODO.git
 - git push -u origin main

Seguridad:
 - No subir archivos .env con claves.
 - Proteger admin-panel (reglas Firestore y verificación de emails ADMIN_EMAILS).

Si querés, genero ahora:
 - Versión PowerShell del script.
 - Instrucciones paso a paso con capturas (simplificadas).
 - Archivo GitHub Actions para deploy automático (requiere configurar secrets).
EOF

# GitHub Actions workflow (ejemplo: build artifacts)
cat > "$ROOT/.github/workflows/ci.yml" <<'EOF'
name: CI - build

on:
  push:
    branches: [ main ]

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install front deps
        run: |
          cd frontend
          npm install
      - name: Build frontend
        run: |
          cd frontend
          npm run build
      - name: Upload frontend artifact
        uses: actions/upload-artifact@v3
        with:
          name: frontend-dist
          path: frontend/dist

  build-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install backend deps
        run: |
          cd backend
          npm install
      - name: Upload backend files
        uses: actions/upload-artifact@v3
        with:
          name: backend-src
          path: backend
EOF

# .gitignore
cat > "$ROOT/.gitignore" <<'EOF'
node_modules
.env
.env.local
dist
.DS_Store
VENDO-TODO.zip
EOF

echo "Escribiendo archivos finales..."
# create zip
rm -f "$ZIPNAME"
zip -r "$ZIPNAME" "$ROOT" > /dev/null

echo "Hecho. Archivo generado: $ZIPNAME"
echo ""
echo "Siguientes pasos recomendados:"
echo "1) Descomprime o mueve la carpeta $ROOT al lugar donde trabajarás."
echo "2) Reemplaza los logos en frontend/public/logo-192.png y logo-512.png y opcional backend/assets/logo.png."
echo "3) Copia .env.example a backend/.env y frontend/.env y completa las claves (Firebase, Mercado Pago) y los datos del negocio."
echo "4) Instala dependencias en cada carpeta y ejecuta:"
echo "   cd $ROOT/backend && npm install && npm run dev"
echo "   cd $ROOT/frontend && npm install && npm run dev"
echo "   cd $ROOT/admin-panel && npm install && npm run dev"
echo ""
echo "Si necesitas la versión PowerShell del script, dímelo y la genero."
